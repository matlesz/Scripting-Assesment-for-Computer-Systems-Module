#!/bin/bash
#removeSpecies script is used to remove species from speciesDetails file acording to name

searchByName()
{
	echo "Please enter the species name (case sensitive)" #example of case sensitive
	read searchParam
	result=$(awk -F ":" -v awk_search="$searchParam" '$1~ awk_search {print NR":" $0}' speciesDetails)
		#search for the searchParam variable in field 1 (species name) and print out the line number and the details
	while [ -z "$result" ]
	do
		echo "Search revealed no Species(s), please enter new search criteria"
		read searchParam
		result=$(awk -F ":" -v awk_search="$searchParam" '$1~ awk_search {print NR":" $0}' speciesDetails)
	done
	echo "$result"
	sleep 0.5 #wait 0.5 seconds
	unset line
	while [[ ! ${line} =~ ^[0-9]+$ ]] #check for a valid input (numberical)
	do
		#get input from the user until its correct
	echo "Which line number do you want to delete, zero to exit"
	read line
	done
	noOfLines=$(sed -n \$= speciesDetails) #get the number of lines in the speciesDetails file
	while [[ $line -gt $noOfLines ]]  #check if the number entered is within the number of lines
	do
	echo "Please enter the line number again, there are $noOfLines lines, zero to exit"
	read line
	done
	if [[ $line -gt "0" ]]
	then
	sed -i "$line"'d' speciesDetails
	echo "Species deleted"
	fi
}
searchByEmail()
{
	echo "Please enter the recorder email (case sensitive)" #example of case insensitive
	read searchParam
	result=$(awk -F ":" -v awk_search="$searchParam" '$2~ awk_search {print NR":" $0}' speciesDetails)
	#search for the searchparm variable in field 1 (recorder email) and print out the line number and the details
	while [ -z "$result" ]
	do
		echo "Search revealed no Recorder Email, please enter new search criteria"
		read searchParam
		result=$(awk -F ":" -v awk_search="$searchParam" '$2~ awk_search {print NR":" $0}' speciesDetails)
	done
	echo "$result"
	sleep 0.5 #wait 0.5 seconds
	unset line
	while [[ ! ${line} =~ ^[0-9]+$ ]] #check for a valid input (numberical)
	do
	#get input from the user until its correct
		echo  "Which line number do you want to delete, zero to exit"
		read line
	done
	noOfLines=$(sed -n \$= speciesDetails) #get the number of lines in the speciesDetails file
	while [[ $line -gt $noOfLines ]]  #check that the number entered isnt above the number of lines
	do
		echo "Please enter the line number again, there are $noOfLines lines, zero to exit"
		read line
	done
	if [[ $line -gt "0" ]]
	then
	sed -i "$line"'d' speciesDetails
	echo "Species delshowWholeListshowWholeListeted"
	fi
}
showWholeList() #option to review entire record list and select records to remove
{
	echo $'\n\nWhole species list:'
	cat -n speciesDetails #displays numbered species list
	while :
	do
	echo $'\nPlease type in the line number(s) of the record(s) you would like to delete (e.g. use format "1 2 3")'
	read line #assigns a variable to user input
	valid="^[0-9 ]+$" #defines variable for valid user input (any number of numbers or spaces, starting and finishing with this format)
	if [[ $line =~ $valid ]] #checks if the user input is valid
	then #if valid..
	echo $'\nAre you sure you want to delete the record(s) on line number(s)' $line '(y/n)?' #checks whether the user definitely wants to delete records
	read decision #records decision variable
	case $decision in 
		[yY] ) #if yes (big or little y)
			echo "OK"
			linesremoved=0 #sets a counter for each time a line/record is removed
			for i in $line #for loop to work through each line the user wanted removed
			do
			i=$((i-linesremoved)) #reduces user input line number each time a line is removed because line moves up one (e.g. if line 1 is removed, line 2 becomes line 1)
			sed ""$i"d" speciesDetails > /tmp/speciesDetails #removes the line and sends to a separate file
			mv /tmp/speciesDetails speciesDetails #moves the reduced text file back into the main speciesDetails file
			linesremoved=$((linesremoved+1)) #increases the number of lines removed
			done
			cat -n speciesDetails #shows the updated text file
			./removeSpecies #returns to remove shell
			break
			;;
		[nN] ) #if no for removal
			echo $'\nNo deletion made'
			./removeSpecies #return to remove shell without any deletion
			break
			;;
		*) echo "invalid input"
			 ./removeSpecies #if incorrect input then return to remove shell without deletion
			break
			;;
	esac
	else #if invalid user input...
		echo $'\nPlease make sure entered line numbers you want to remove is in a valid format (e.g. 1 2 3)' #user warning of using correct format for choosing lines and remains within loop for selecting lines to remove
	fi
done
}
deleteAllRecords() #if user is looking to delete all the records on the list
{
	echo $'\nWARNING: Are you sure you want to delete all damn record list from the system? (y/n)?' #warning for the user before deleting all records
	read decision #assigns variale to answer
	case $decision in
		[yY] ) #if decision yes (big or small y)
			echo "OK"
			cp blankDetails speciesDetails #copy of blank text file overwrites main text file
			./removeSpecies #return to remove shell
			break
			;;
		[nN] ) #if decision is no (big or small n)
			echo $'\nNo deletion made'
			./removeSpecies #no deletion made and return to remove shell
			break
			;;
		*) echo "invalid input"
		./removeSpecies #if invalid input then return to remove shell
			break
			;;
	esac
}

while :
do
cat <<EOF
Please choose to remove a Species based upon
(1) "Species name"
(2) "Recorder email"
(3) "Show whole species list"
(4) "Remove all records"
(5) "return to main menu"
Please enter a number
EOF
	read  Reply
	case "$Reply" in "1") 	searchByName
				#find species by it's name
				;;
			"2") 	searchByEmail
				#find species by recorder email
		 		;;
			"3") 	showWholeList
				#show whole list of species to remove one
				;;
			"4") 	deleteAllRecords
				#delete all records
				;;
			"5") 	echo "back to the main menu"
				exit
				;;
			*) 	echo "invalid option"
				;;
	esac
	sleep 1
done
